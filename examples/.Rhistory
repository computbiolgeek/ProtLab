scale_y_continuous(breaks = seq(0, 12, by = 2),
labels = c("0.0", "2.0", "4.0", "6.0", "8.0", "10.0", "12.0")) +
xlab("Residue ID") +
scale_color_gradient2(low = "blue", mid = "white", high = "red", midpoint = 5.5) +
geom_point(shape = 1, size = 5, colour = "black")
# create the plot
ggplot(data = df, mapping = aes(x = res_id, y = angle_0)) +
geom_point(data = df, mapping = aes(colour = angle_0), size = 5) +
geom_line(size = 1, colour = "grey40") +
theme_bw() +
theme(
panel.grid = element_blank(),
axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18, angle = 90),
axis.text.x = element_text(size = 16),
axis.text.y = element_text(size = 16),
legend.position = "none"
) +
ylab(label = "Weighted contact number") +
expand_limits(x = 5, y = c(0, 12)) +
scale_x_continuous(breaks = seq(5, 27, by = 1)) +
scale_y_continuous(breaks = seq(0, 12, by = 2),
labels = c("0.0", "2.0", "4.0", "6.0", "8.0", "10.0", "12.0")) +
xlab("Residue ID") +
scale_color_gradient2(low = "blue", mid = "white", high = "red", midpoint = 5.5) +
geom_point(shape = 1, size = 5, colour = "black")
ggsave(filename = "cn_helix_rotation_coupling_1m0l.pdf")
# read in prediction results as a data frame
df <- read.csv(file = "cn_helix_rotation_coupling_1m0l.csv", header = FALSE)
names(df) <- c("res_id", "angle_0", "angle_1", "angle_2", "angle_3", "angle_4", "angle_5", "angle_6",
"angle_n1", "angle_n2", "angle_n3", "angle_n4", "angle_n5", "angle_n6")
head(df)
wcn_rmsd <- function(wcn1, wcn2) {
# make sure that wcn1 and wcn2 have the same length
stopifnot(length(wcn1) == length(wcn2))
return(sqrt(sum((wcn1 - wcn2)^2) / length(wcn1)))
}
lapply(X = df, FUN = wcn_rmsd)
lapply(X = df, FUN = wcn_rmsd(wcn2 = df$angle_0))
lapply(X = df, FUN = wcn_rmsd(wcn1 = df$angle_0, wcn2 = df$angle_0))
wcn_rmsd <- function(wcn) {
# make sure that wcn1 and wcn2 have the same length
stopifnot(length(wcn) == length(df$angle_0))
return(sqrt(sum((wcn - df$angle_0)^2) / length(wcn)))
}
lapply(X = df, FUN = wcn_rmsd)
sapply(X = df, FUN = wcn_rmsd)
sapply(X = df[,-1], FUN = wcn_rmsd)
sapply(X = df[,-c(1, 2)], FUN = wcn_rmsd)
cn_rmsd <- sapply(X = df[,-c(1, 2)], FUN = wcn_rmsd)
cn_rmsd
plot(cn_rmsd)
df <- df[c("res_id", "angle_0", "angle_1", "angle_2", "angle_3", "angle_4", "angle_5", "angle_6",
"angle_n6", "angle_n5", "angle_n4", "angle_n3", "angle_n2", "angle_n1")]
rmsd <- sapply(X = df[,-c(1, 2)], FUN = wcn_rmsd)
plot(rmsd)
rmsd <- sapply(X = df[,-c(1)], FUN = wcn_rmsd)
plot(rmsd)
df <- data.frame(df, df$angle_0)
head(df)
df <- data.frame(df, angle_0_cp = df$angle_0)
rmsd <- sapply(X = df[,-c(1)], FUN = wcn_rmsd)
plot(rmsd)
rmsd
# rearrange columns
df <- df[c("res_id", "angle_0", "angle_1", "angle_2", "angle_3", "angle_4", "angle_5", "angle_6",
"angle_n6", "angle_n5", "angle_n4", "angle_n3", "angle_n2", "angle_n1")]
df <- data.frame(df, angle_0_cp = df$angle_0)
rmsd
# read in prediction results as a data frame
df <- read.csv(file = "cn_helix_rotation_coupling_1m0l.csv", header = FALSE)
names(df) <- c("res_id", "angle_0", "angle_1", "angle_2", "angle_3", "angle_4", "angle_5", "angle_6",
"angle_n1", "angle_n2", "angle_n3", "angle_n4", "angle_n5", "angle_n6")
# rearrange columns
df <- df[c("res_id", "angle_0", "angle_1", "angle_2", "angle_3", "angle_4", "angle_5", "angle_6",
"angle_n6", "angle_n5", "angle_n4", "angle_n3", "angle_n2", "angle_n1")]
df <- data.frame(df, angle_0_cp = df$angle_0)
rmsd
rmsd <- sapply(X = df[,-c(1)], FUN = wcn_rmsd)
rmsd
plot(rmsd)
rotation_angles <- seq(0, 360, by = 30)
rotation_angles
length(rotation_angles)
length(rmsd)
# read in prediction results as a data frame
df <- read.csv(file = "cn_helix_rotation_coupling_1m0l.csv", header = FALSE)
names(df) <- c("res_id", "angle_0", "angle_1", "angle_2", "angle_3", "angle_4", "angle_5", "angle_6",
"angle_n1", "angle_n2", "angle_n3", "angle_n4", "angle_n5", "angle_n6")
# rearrange columns
df <- df[c("res_id", "angle_0", "angle_1", "angle_2", "angle_3", "angle_4", "angle_5",
"angle_n6", "angle_n5", "angle_n4", "angle_n3", "angle_n2", "angle_n1")]
df <- data.frame(df, angle_0_cp = df$angle_0)
rmsd <- sapply(X = df[,-c(1)], FUN = wcn_rmsd)
rotation_angles <- seq(0, 360, by = 30)
length(rotation_angles)
length(rmsd)
plot(rmsd)
# rearrange columns
df <- df[c("res_id", "angle_0", "angle_1", "angle_2", "angle_3", "angle_4", "angle_5", "angle_6",
"angle_n5", "angle_n4", "angle_n3", "angle_n2", "angle_n1")]
df <- data.frame(df, angle_0_cp = df$angle_0)
# read in prediction results as a data frame
df <- read.csv(file = "cn_helix_rotation_coupling_1m0l.csv", header = FALSE)
names(df) <- c("res_id", "angle_0", "angle_1", "angle_2", "angle_3", "angle_4", "angle_5", "angle_6",
"angle_n1", "angle_n2", "angle_n3", "angle_n4", "angle_n5", "angle_n6")
# rearrange columns
df <- df[c("res_id", "angle_0", "angle_1", "angle_2", "angle_3", "angle_4", "angle_5", "angle_6",
"angle_n5", "angle_n4", "angle_n3", "angle_n2", "angle_n1")]
df <- data.frame(df, angle_0_cp = df$angle_0)
rmsd <- sapply(X = df[,-c(1)], FUN = wcn_rmsd)
rotation_angles <- seq(0, 360, by = 30)
plot(rmsd)
plot(rmsd, type = "b")
# rearrange columns
df <- df[c("res_id", "angle_0", "angle_1", "angle_2", "angle_3", "angle_4", "angle_5", "angle_6",
"angle_n6", "angle_n5", "angle_n4", "angle_n3", "angle_n2", "angle_n1")]
# read in prediction results as a data frame
df <- read.csv(file = "cn_helix_rotation_coupling_1m0l.csv", header = FALSE)
names(df) <- c("res_id", "angle_0", "angle_1", "angle_2", "angle_3", "angle_4", "angle_5", "angle_6",
"angle_n1", "angle_n2", "angle_n3", "angle_n4", "angle_n5", "angle_n6")
# rearrange columns
df <- df[c("res_id", "angle_0", "angle_1", "angle_2", "angle_3", "angle_4", "angle_5", "angle_6",
"angle_n6", "angle_n5", "angle_n4", "angle_n3", "angle_n2", "angle_n1")]
mean(df$angle_6, df$angle_n6)
mean(df$angle_6 + df$angle_n6)
df$angle_6 + df$angle_n6
df$angle_6 + df$angle_n6 / 2
df$angle_6
(df$angle_6 + df$angle_n6) / 2
df$angle_n6
df <- read.csv(file = "cn_helix_rotation_coupling_1m0l.csv", header = FALSE)
names(df) <- c("res_id", "angle_0", "angle_1", "angle_2", "angle_3", "angle_4", "angle_5", "angle_6",
"angle_n1", "angle_n2", "angle_n3", "angle_n4", "angle_n5", "angle_n6")
# rearrange columns
df <- df[c("res_id", "angle_0", "angle_1", "angle_2", "angle_3", "angle_4", "angle_5", "angle_6",
"angle_n6", "angle_n5", "angle_n4", "angle_n3", "angle_n2", "angle_n1")]
df <- data.frame(df[c("res_id", "angle_0", "angle_1", "angle_2", "angle_3", "angle_4", "angle_5")],
angle_6_avg = (df$angle_6 + df$angle_n6) / 1, angle_0_cp = df$angle_0)
rmsd <- sapply(X = df[,-c(1)], FUN = wcn_rmsd)
plot(rmsd)
# read in prediction results as a data frame
df <- read.csv(file = "cn_helix_rotation_coupling_1m0l.csv", header = FALSE)
names(df) <- c("res_id", "angle_0", "angle_1", "angle_2", "angle_3", "angle_4", "angle_5", "angle_6",
"angle_n1", "angle_n2", "angle_n3", "angle_n4", "angle_n5", "angle_n6")
# rearrange columns
df <- df[c("res_id", "angle_0", "angle_1", "angle_2", "angle_3", "angle_4", "angle_5", "angle_6",
"angle_n6", "angle_n5", "angle_n4", "angle_n3", "angle_n2", "angle_n1")]
df <- data.frame(df[c("res_id", "angle_0", "angle_1", "angle_2", "angle_3", "angle_4", "angle_5")],
angle_6_avg = (df$angle_6 + df$angle_n6) / 2,
df[c("angle_n5", "angle_n4", "angle_n3", "angle_n2", "angle_n1")], angle_0_cp = df$angle_0)
rmsd <- sapply(X = df[,-c(1)], FUN = wcn_rmsd)
plot(rmsd)
ggplot(data = df, mapping = aes(x = res_id, y = angle_0)) +
geom_point(data = df, mapping = aes(colour = angle_0), size = 5) +
geom_line(size = 1, colour = "grey40") +
theme_bw() +
theme(
panel.grid = element_blank(),
axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18, angle = 90),
axis.text.x = element_text(size = 16),
axis.text.y = element_text(size = 16),
legend.position = "none"
) +
ylab(label = "Weighted contact number") +
expand_limits(x = 5, y = c(0, 12)) +
scale_x_continuous(breaks = seq(5, 27, by = 1)) +
scale_y_continuous(breaks = seq(0, 12, by = 2),
labels = c("0.0", "2.0", "4.0", "6.0", "8.0", "10.0", "12.0")) +
xlab("Residue ID") +
scale_color_gradient2(low = "blue", mid = "white", high = "red", midpoint = 5.5) +
geom_point(shape = 1, size = 5, colour = "black")
library(ggplot2)
# create the plot
ggplot(data = df, mapping = aes(x = res_id, y = angle_0)) +
geom_point(data = df, mapping = aes(colour = angle_0), size = 5) +
geom_line(size = 1, colour = "grey40") +
theme_bw() +
theme(
panel.grid = element_blank(),
axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18, angle = 90),
axis.text.x = element_text(size = 16),
axis.text.y = element_text(size = 16),
legend.position = "none"
) +
ylab(label = "Weighted contact number") +
expand_limits(x = 5, y = c(0, 12)) +
scale_x_continuous(breaks = seq(5, 27, by = 1)) +
scale_y_continuous(breaks = seq(0, 12, by = 2),
labels = c("0.0", "2.0", "4.0", "6.0", "8.0", "10.0", "12.0")) +
xlab("Residue ID") +
scale_color_gradient2(low = "blue", mid = "white", high = "red", midpoint = 5.5) +
geom_point(shape = 1, size = 5, colour = "black")
# create the plot
ggplot(data = df, mapping = aes(x = res_id, y = angle_0)) +
geom_point(data = df, mapping = aes(colour = angle_0), size = 5) +
geom_line(size = 1, colour = "grey40") +
theme_bw() +
theme(
panel.grid = element_blank(),
axis.title.x = element_text(size = 18, angle = 90),
axis.title.y = element_text(size = 18),
axis.text.x = element_text(size = 16),
axis.text.y = element_text(size = 16),
legend.position = "none"
) +
ylab(label = "Weighted contact number") +
expand_limits(x = 5, y = c(0, 12)) +
scale_x_continuous(breaks = seq(5, 27, by = 1)) +
scale_y_continuous(breaks = seq(0, 12, by = 2),
labels = c("0.0", "2.0", "4.0", "6.0", "8.0", "10.0", "12.0")) +
xlab("Residue ID") +
scale_color_gradient2(low = "blue", mid = "white", high = "red", midpoint = 5.5) +
geom_point(shape = 1, size = 5, colour = "black")
# create the plot
ggplot(data = df, mapping = aes(x = res_id, y = angle_0)) +
geom_point(data = df, mapping = aes(colour = angle_0), size = 5) +
geom_line(size = 1, colour = "grey40") +
theme_bw() +
theme(
panel.grid = element_blank(),
axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18),
axis.text.x = element_text(size = 16,  angle = 90),
axis.text.y = element_text(size = 16),
legend.position = "none"
) +
ylab(label = "Weighted contact number") +
expand_limits(x = 5, y = c(0, 12)) +
scale_x_continuous(breaks = seq(5, 27, by = 1)) +
scale_y_continuous(breaks = seq(0, 12, by = 2),
labels = c("0.0", "2.0", "4.0", "6.0", "8.0", "10.0", "12.0")) +
xlab("Residue ID") +
scale_color_gradient2(low = "blue", mid = "white", high = "red", midpoint = 5.5) +
geom_point(shape = 1, size = 5, colour = "black")
# create the plot
ggplot(data = df, mapping = aes(x = res_id, y = angle_0)) +
geom_point(data = df, mapping = aes(colour = angle_0), size = 5) +
geom_line(size = 1, colour = "grey40") +
theme_bw() +
theme(
panel.grid = element_blank(),
axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18),
axis.text.x = element_text(size = 16,  angle = 90, vjust = 0.5),
axis.text.y = element_text(size = 16),
legend.position = "none"
) +
ylab(label = "Weighted contact number") +
expand_limits(x = 5, y = c(0, 12)) +
scale_x_continuous(breaks = seq(5, 27, by = 1)) +
scale_y_continuous(breaks = seq(0, 12, by = 2),
labels = c("0.0", "2.0", "4.0", "6.0", "8.0", "10.0", "12.0")) +
xlab("Residue ID") +
scale_color_gradient2(low = "blue", mid = "white", high = "red", midpoint = 5.5) +
geom_point(shape = 1, size = 5, colour = "black")
# create the plot
ggplot(data = df, mapping = aes(x = res_id, y = angle_0)) +
geom_point(data = df, mapping = aes(colour = angle_0), size = 5) +
geom_line(size = 1, colour = "grey40") +
theme_bw() +
theme(
panel.grid = element_blank(),
axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18),
axis.text.x = element_text(size = 16,  angle = 90, vjust = 0.5),
axis.text.y = element_text(size = 16, angle = 90),
legend.position = "none"
) +
ylab(label = "Weighted contact number") +
expand_limits(x = 5, y = c(0, 12)) +
scale_x_continuous(breaks = seq(5, 27, by = 1)) +
scale_y_continuous(breaks = seq(0, 12, by = 2),
labels = c("0.0", "2.0", "4.0", "6.0", "8.0", "10.0", "12.0")) +
xlab("Residue ID") +
scale_color_gradient2(low = "blue", mid = "white", high = "red", midpoint = 5.5) +
geom_point(shape = 1, size = 5, colour = "black")
ggplot(data = df, mapping = aes(x = res_id, y = angle_0)) +
geom_point(data = df, mapping = aes(colour = angle_0), size = 5) +
geom_line(size = 1, colour = "grey40") +
theme_bw() +
theme(
panel.grid = element_blank(),
axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18),
axis.text.x = element_text(size = 16,  angle = 90, vjust = 0.5),
axis.text.y = element_text(size = 16, angle = 90, vjust = 0.5),
legend.position = "none"
) +
ylab(label = "Weighted contact number") +
expand_limits(x = 5, y = c(0, 12)) +
scale_x_continuous(breaks = seq(5, 27, by = 1)) +
scale_y_continuous(breaks = seq(0, 12, by = 2),
labels = c("0.0", "2.0", "4.0", "6.0", "8.0", "10.0", "12.0")) +
xlab("Residue ID") +
scale_color_gradient2(low = "blue", mid = "white", high = "red", midpoint = 5.5) +
geom_point(shape = 1, size = 5, colour = "black")
# create the plot
ggplot(data = df, mapping = aes(x = res_id, y = angle_0)) +
geom_point(data = df, mapping = aes(colour = angle_0), size = 5) +
geom_line(size = 1, colour = "grey40") +
theme_bw() +
theme(
panel.grid = element_blank(),
axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18),
axis.text.x = element_text(size = 16,  angle = 90, vjust = 0.5),
axis.text.y = element_text(size = 16, angle = 90, vjust = -0.5),
legend.position = "none"
) +
ylab(label = "Weighted contact number") +
expand_limits(x = 5, y = c(0, 12)) +
scale_x_continuous(breaks = seq(5, 27, by = 1)) +
scale_y_continuous(breaks = seq(0, 12, by = 2),
labels = c("0.0", "2.0", "4.0", "6.0", "8.0", "10.0", "12.0")) +
xlab("Residue ID") +
scale_color_gradient2(low = "blue", mid = "white", high = "red", midpoint = 5.5) +
geom_point(shape = 1, size = 5, colour = "black")
# create the plot
ggplot(data = df, mapping = aes(x = res_id, y = angle_0)) +
geom_point(data = df, mapping = aes(colour = angle_0), size = 5) +
geom_line(size = 1, colour = "grey40") +
theme_bw() +
theme(
panel.grid = element_blank(),
axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18),
axis.text.x = element_text(size = 16,  angle = 90, vjust = 0.5),
axis.text.y = element_text(size = 16, angle = 90, vjust = -1.0),
legend.position = "none"
) +
ylab(label = "Weighted contact number") +
expand_limits(x = 5, y = c(0, 12)) +
scale_x_continuous(breaks = seq(5, 27, by = 1)) +
scale_y_continuous(breaks = seq(0, 12, by = 2),
labels = c("0.0", "2.0", "4.0", "6.0", "8.0", "10.0", "12.0")) +
xlab("Residue ID") +
scale_color_gradient2(low = "blue", mid = "white", high = "red", midpoint = 5.5) +
geom_point(shape = 1, size = 5, colour = "black")
# create the plot
ggplot(data = df, mapping = aes(x = res_id, y = angle_0)) +
geom_point(data = df, mapping = aes(colour = angle_0), size = 5) +
geom_line(size = 1, colour = "grey40") +
theme_bw() +
theme(
panel.grid = element_blank(),
axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18),
axis.text.x = element_text(size = 16,  angle = 90, vjust = 0.5),
axis.text.y = element_text(size = 16, angle = 90, vjust = +1.0),
legend.position = "none"
) +
ylab(label = "Weighted contact number") +
expand_limits(x = 5, y = c(0, 12)) +
scale_x_continuous(breaks = seq(5, 27, by = 1)) +
scale_y_continuous(breaks = seq(0, 12, by = 2),
labels = c("0.0", "2.0", "4.0", "6.0", "8.0", "10.0", "12.0")) +
xlab("Residue ID") +
scale_color_gradient2(low = "blue", mid = "white", high = "red", midpoint = 5.5) +
geom_point(shape = 1, size = 5, colour = "black")
# create the plot
ggplot(data = df, mapping = aes(x = res_id, y = angle_0)) +
geom_point(data = df, mapping = aes(colour = angle_0), size = 5) +
geom_line(size = 1, colour = "grey40") +
theme_bw() +
theme(
panel.grid = element_blank(),
axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18),
axis.text.x = element_text(size = 16,  angle = 90, vjust = 0.5),
axis.text.y = element_text(size = 16, angle = 90),
legend.position = "none"
) +
ylab(label = "Weighted contact number") +
expand_limits(x = 5, y = c(0, 12)) +
scale_x_continuous(breaks = seq(5, 27, by = 1)) +
scale_y_continuous(breaks = seq(0, 12, by = 2),
labels = c("0.0", "2.0", "4.0", "6.0", "8.0", "10.0", "12.0")) +
xlab("Residue ID") +
scale_color_gradient2(low = "blue", mid = "white", high = "red", midpoint = 5.5) +
geom_point(shape = 1, size = 5, colour = "black")
# create the plot
ggplot(data = df, mapping = aes(x = res_id, y = angle_0)) +
geom_point(data = df, mapping = aes(colour = angle_0), size = 5) +
geom_line(size = 1, colour = "grey40") +
theme_bw() +
theme(
panel.grid = element_blank(),
axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18),
axis.text.x = element_text(size = 16,  angle = 90, vjust = 0.5),
axis.text.y = element_text(size = 16, angle = 90, hjust = 0.5),
legend.position = "none"
) +
ylab(label = "Weighted contact number") +
expand_limits(x = 5, y = c(0, 12)) +
scale_x_continuous(breaks = seq(5, 27, by = 1)) +
scale_y_continuous(breaks = seq(0, 12, by = 2),
labels = c("0.0", "2.0", "4.0", "6.0", "8.0", "10.0", "12.0")) +
xlab("Residue ID") +
scale_color_gradient2(low = "blue", mid = "white", high = "red", midpoint = 5.5) +
geom_point(shape = 1, size = 5, colour = "black")
ggplot(data = df, mapping = aes(x = res_id, y = angle_0)) +
geom_point(data = df, mapping = aes(colour = angle_0), size = 5) +
geom_line(size = 1, colour = "grey40") +
theme_bw() +
theme(
panel.grid = element_blank(),
axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18),
axis.text.x = element_text(size = 16,  angle = 90, vjust = 0.5),
axis.text.y = element_text(size = 16, angle = 90, hjust = 0.5),
legend.position = "none"
) +
ylab(label = "Weighted contact number") +
expand_limits(x = 5, y = c(0, 12)) +
scale_x_continuous(breaks = seq(5, 27, by = 1), labels = seq(9, 31, by = 1)) +
scale_y_continuous(breaks = seq(0, 12, by = 2),
labels = c("0.0", "2.0", "4.0", "6.0", "8.0", "10.0", "12.0")) +
xlab("Residue ID") +
scale_color_gradient2(low = "blue", mid = "white", high = "red", midpoint = 5.5) +
geom_point(shape = 1, size = 5, colour = "black")
knitr::opts_chunk$set(echo = TRUE)
x <- seq(0, 1, 0.1)
x
length(x)
1 / 9
x <- seq(0, 1, 0.1111)
x
pi
t <- sin(2 * pi * x) + rnorm(n = 10, mean = 0, sd = 0.3)
t
plot(t)
t <- sin(2 * pi * x) + rnorm(n = 10, mean = 0, sd = 0.3)
plot(t)
#
x <- seq(0, 1, 0.1111)
t <- sin(2 * pi * x) + rnorm(n = 10, mean = 0, sd = 0.3)
plot(x = x, y = t, xlim = c(0, 1), ylim = c(-2, 2))
plot(x = x, y = sin(2 * pi * x))
plot(x = x, y = sin(2 * pi * x), type = "l")
seq_len(10)
seq_len(100)
seq_len(0, 1, 10)
seq(0, 1, 10)
seq(0, 1)
seq(0, 1, length.out = 10)
xs <- seq(0, 1, length.out = 100)
plot(x = xs, y = sin(2 * pi * xs), type = "l", col = "grenn")
plot(x = xs, y = sin(2 * pi * xs), type = "l", col = "green")
plot(x = xs, y = sin(2 * pi * xs), type = "l", col = "green", lty = "2")
plot(x = xs, y = sin(2 * pi * xs), type = "l", col = "green", lty = 2)
plot(x = xs, y = sin(2 * pi * xs), type = "l", col = "green", lwd = 2)
plot(x = xs, y = sin(2 * pi * xs), type = "l", col = "green", lwd = 3)
plot(x = x, y = t, xlim = c(0, 1), ylim = c(-1.5, 1.5), col = "blue", ylab = "t", xlab = "x")
curve(expr = sin(2 * pi * xs), from = 0, to = 1, n = 100)
curve(expr = y ~ sin(2 * pi * xs), from = 0, to = 1, n = 100)
curve(expr = sin(2 * pi * x), from = 0, to = 1, n = 100)
# fit a polynomial with order = 0
m0 <- lm(formula = noisy_t ~ poly(x = x, degree = 0))
# create a set of 10 data points with Gaussian noise
set.seed(seed = 20160215)
x <- seq(0, 1, length.out = 10)
noise <- rnorm(n = length(x), mean = 0, sd = 0.3)
noisy_t <- sin(2 * pi * x) + noise
plot(x = x, y = noisy_t, xlim = c(0, 1), ylim = c(-1.5, 1.5), col = "blue",
ylab = "t", xlab = "x")
# curve of the function sin(2*pi*x)
curve(expr = sin(2 * pi * x), from = 0, to = 1, type = "l", col = "green",
lwd = 3, add = TRUE)
# fit a polynomial with order = 0
m0 <- lm(formula = noisy_t ~ poly(x = x, degree = 0))
# fit a polynomial with order = 0
m0 <- mean(noisy_t)
m1 <- lm(formula = noisy_t ~ poly(x = x, degree = 1))
m3 <- lm(formula = noisy_t ~ poly(x = x, degree = 3))
m9 <- lm(formula = noisy_t ~ poly(x = x, degree = 9))
m0
m1
predict(object = m1, newdata = x)
predict(object = m1, newdata = data.frame(x))
y <- predict(object = m1, newdata = data.frame(x))
y
class(y)
plot(x = x, y = y)
m3
curve(expr = m3)
curve(expr = m3$qr)
curve(expr = m3$model)
m3
m3$coefficients
m3$qr
m3$model
plot(m3)
plot(m9)
m9$coefficients
sqrt(qchisq(0.99, df = 2))
sqrt(qchisq(0.99, df = 2))^2
pchisq(1, df = 3)
pchisq(4, df = 3)
pchisq(8, df = 3)
log2(1/20)
getwd()
setwd("~/workspace/ProtLab/examples/")
tmp <- read.csv(file = "2a65_mi.csv", header = TRUE, row.names = 1)
View(tmp)
10 * 100 * 100 / 60
10 * 100 * 100 / (60 * 24)
10 * 50 * 50 / (60 * 24)
2 * 50 * 50 / (60 * 24)
